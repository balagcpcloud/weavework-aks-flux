{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview TF-controller is an experimental controller for Flux to reconcile Terraform resources in the GitOps way. With the power of Flux together with Terraform, TF-controller allows you to GitOps-ify infrastructure, and application resources, in the Kubernetes and Terraform universe, at your own pace. \"At your own pace\" means you don't need to GitOps-ify everything at once. TF-controller offers many GitOps models: GitOps Automation Model: GitOps your Terraform resources from the provision steps to the enforcement steps, like a whole EKS cluster. Hybrid GitOps Automation Model: GitOps parts of your existing infrastructure resources. For example, you have an existing EKS cluster. You can choose to GitOps only its nodegroup, or its security group. State Enforcement Model: You have a TFSTATE file, and you'd like to use GitOps enforce it, without changing anything else. Drift Detection Model: You have a TFSTATE file, and you'd like to use GitOps just for drift detection, so you can decide to do things later when a drift occurs. To get started, follow the getting started guide. Features Multi-Tenancy : TF-controller supports multi-tenancy by running Terraform plan and apply inside Runner Pods. When specifying .metadata.namespace and .spec.serviceAccountName , the Runner Pod uses the specified ServiceAccount and runs inside the specified Namespace. These settings enable the soft multi-tenancy model, which can be used within the Flux multi-tenancy setup. This feature is available since v0.9.0. GitOps Automation for Terraform : With setting .spec.approvePlan=auto , it allows a Terraform object to be reconciled and act as the representation of your Terraform resources. The TF-controller uses the spec of the Terraform object to perform plan , apply its associated Terraform resources. It then stores the TFSTATE of the applied resources as a Secret inside the Kubernetes cluster. After .spec.interval passes, the controller performs drift detection to check if there is a drift occurred between your live system, and your Terraform resources. If a drift occurs, the plan to fix that drift will be generated and applied automatically. This feature is available since v0.3.0. Drift detection : This feature is a part of the GitOps automation feature. The controller detects and fixes drift for your infrastructures, based on the Terraform resources and their TFSTATE . This feature is available since v0.5.0. Drift detection is enabled by default. You can use the field .spec.disableDriftDetection to disable this behaviour. This feature is available since v0.7.0. The Drift detection only mode, without plan or apply steps, allows you to perform read-only drift detection. This feature is available since v0.8.0. Plan and Manual Approve : This feature allows you to separate the plan , out of the apply step, just like the Terraform workflow you are familiar with. A good thing about this is that it is done in a GitOps way. When a plan is generated, the controller shows you a message like 'set approvePlan: \"plan-main-123\" to apply this plan.' . You make change to the field .spec.approvePlan , commit and push to tell the TF-controller to apply the plan for you. With this GitOps workflow, you can optionally create and push this change to a new branch for your team member to review and approve too. This feature is available since v0.6.0. First-class YAML-based Terraform : The Terraform object in v0.13.0+ allows you to better configure your Terraform resources via YAMLs, but without introducing any extra CRDs to your cluster. Together with a new generator called Tofu-Jet , we'll now be able to ship pre-generated primitive Terraform modules for all major cloud providers. A primitive Terraform module is a module that only contains a single primitive resource, like aws_iam_role , or aws_iam_policy . With this concept, we would be able to use Terraform without writing Terraform codes, and make it more GitOps-friendly at the same time. This feature is available since v0.13.0. Dependencies Version Terraform Source Controller Flux v2 v0.13.0-rc v1.3.1 v0.30.0 v0.35.x v0.12.0 v1.1.9 v0.26.1 v0.32.x","title":"Overview"},{"location":"#overview","text":"TF-controller is an experimental controller for Flux to reconcile Terraform resources in the GitOps way. With the power of Flux together with Terraform, TF-controller allows you to GitOps-ify infrastructure, and application resources, in the Kubernetes and Terraform universe, at your own pace. \"At your own pace\" means you don't need to GitOps-ify everything at once. TF-controller offers many GitOps models: GitOps Automation Model: GitOps your Terraform resources from the provision steps to the enforcement steps, like a whole EKS cluster. Hybrid GitOps Automation Model: GitOps parts of your existing infrastructure resources. For example, you have an existing EKS cluster. You can choose to GitOps only its nodegroup, or its security group. State Enforcement Model: You have a TFSTATE file, and you'd like to use GitOps enforce it, without changing anything else. Drift Detection Model: You have a TFSTATE file, and you'd like to use GitOps just for drift detection, so you can decide to do things later when a drift occurs. To get started, follow the getting started guide.","title":"Overview"},{"location":"#features","text":"Multi-Tenancy : TF-controller supports multi-tenancy by running Terraform plan and apply inside Runner Pods. When specifying .metadata.namespace and .spec.serviceAccountName , the Runner Pod uses the specified ServiceAccount and runs inside the specified Namespace. These settings enable the soft multi-tenancy model, which can be used within the Flux multi-tenancy setup. This feature is available since v0.9.0. GitOps Automation for Terraform : With setting .spec.approvePlan=auto , it allows a Terraform object to be reconciled and act as the representation of your Terraform resources. The TF-controller uses the spec of the Terraform object to perform plan , apply its associated Terraform resources. It then stores the TFSTATE of the applied resources as a Secret inside the Kubernetes cluster. After .spec.interval passes, the controller performs drift detection to check if there is a drift occurred between your live system, and your Terraform resources. If a drift occurs, the plan to fix that drift will be generated and applied automatically. This feature is available since v0.3.0. Drift detection : This feature is a part of the GitOps automation feature. The controller detects and fixes drift for your infrastructures, based on the Terraform resources and their TFSTATE . This feature is available since v0.5.0. Drift detection is enabled by default. You can use the field .spec.disableDriftDetection to disable this behaviour. This feature is available since v0.7.0. The Drift detection only mode, without plan or apply steps, allows you to perform read-only drift detection. This feature is available since v0.8.0. Plan and Manual Approve : This feature allows you to separate the plan , out of the apply step, just like the Terraform workflow you are familiar with. A good thing about this is that it is done in a GitOps way. When a plan is generated, the controller shows you a message like 'set approvePlan: \"plan-main-123\" to apply this plan.' . You make change to the field .spec.approvePlan , commit and push to tell the TF-controller to apply the plan for you. With this GitOps workflow, you can optionally create and push this change to a new branch for your team member to review and approve too. This feature is available since v0.6.0. First-class YAML-based Terraform : The Terraform object in v0.13.0+ allows you to better configure your Terraform resources via YAMLs, but without introducing any extra CRDs to your cluster. Together with a new generator called Tofu-Jet , we'll now be able to ship pre-generated primitive Terraform modules for all major cloud providers. A primitive Terraform module is a module that only contains a single primitive resource, like aws_iam_role , or aws_iam_policy . With this concept, we would be able to use Terraform without writing Terraform codes, and make it more GitOps-friendly at the same time. This feature is available since v0.13.0.","title":"Features"},{"location":"#dependencies","text":"Version Terraform Source Controller Flux v2 v0.13.0-rc v1.3.1 v0.30.0 v0.35.x v0.12.0 v1.1.9 v0.26.1 v0.32.x","title":"Dependencies"},{"location":"getting_started/","text":"Getting Started Preflight Checks Here are the requirements you need to set up before you start: Flux v0.32.0 or later (not only the CLI, but also the controllers on the cluster). If you are not sure about the Flux version on your cluster, please re-bootstrap your cluster. TF-controller uses the Controller/Runner architecture . The Controller acts as a client, and talks to each Runner's Pod via gRPC. Please make sure Each Runner's Pod in each Namespace is allowed to open, and serve at port 30000 (the gRPC port of a Runner), and the Controller can connect to it. The Controller needs to download tar.gz BLOBs from the Source controller via port 80 . The Controller needs to post the events to the Notification controller via port 80 . Installation Before using TF-controller, you have to install Flux by using either flux install or flux bootstrap command. Please note that TF-controller now requires Flux v0.32.0 or later, so please make sure you have the latest version of Flux. After that you can install TF-controller with Flux HelmRelease by: kubectl apply -f https://raw.githubusercontent.com/weaveworks/tf-controller/main/docs/release.yaml For the most recent release candidate of TF-controller, please use rc.yaml . kubectl apply -f https://raw.githubusercontent.com/weaveworks/tf-controller/main/docs/rc.yaml or manually with Helm by: # Add tf-controller helm repository helm repo add tf-controller https://weaveworks.github.io/tf-controller/ # Install tf-controller helm upgrade -i tf-controller tf-controller/tf-controller \\ --namespace flux-system For details on configurable parameters of the TF-controller chart, please see chart readme . Alternatively, you can install TF-controller via kubectl : export TF_CON_VER = v0.12.0 kubectl apply -f https://github.com/weaveworks/tf-controller/releases/download/ ${ TF_CON_VER } /tf-controller.crds.yaml kubectl apply -f https://github.com/weaveworks/tf-controller/releases/download/ ${ TF_CON_VER } /tf-controller.rbac.yaml kubectl apply -f https://github.com/weaveworks/tf-controller/releases/download/ ${ TF_CON_VER } /tf-controller.deployment.yaml Quick start Here's a simple example of how to GitOps your Terraform resources with TF-controller and Flux. Define source First, we need to define a Source controller's source ( GitRepository , Bucket , OCIRepository ), for example: apiVersion : source.toolkit.fluxcd.io/v1beta1 kind : GitRepository metadata : name : helloworld namespace : flux-system spec : interval : 30s url : https://github.com/tf-controller/helloworld ref : branch : main The GitOps Automation mode The GitOps automation mode could be enabled by setting .spec.approvePlan=auto . In this mode, Terraform resources will be planned, and automatically applied for you. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : interval : 1m approvePlan : auto path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system For a full list of features and how to use them, please follow the Use TF-controller guide. Other Examples A Terraform GitOps with Flux to automatically reconcile your AWS IAM Policies . GitOps an existing EKS cluster, by partially import its nodegroup and manage it with TF-controller: An EKS scaling example .","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#preflight-checks","text":"Here are the requirements you need to set up before you start: Flux v0.32.0 or later (not only the CLI, but also the controllers on the cluster). If you are not sure about the Flux version on your cluster, please re-bootstrap your cluster. TF-controller uses the Controller/Runner architecture . The Controller acts as a client, and talks to each Runner's Pod via gRPC. Please make sure Each Runner's Pod in each Namespace is allowed to open, and serve at port 30000 (the gRPC port of a Runner), and the Controller can connect to it. The Controller needs to download tar.gz BLOBs from the Source controller via port 80 . The Controller needs to post the events to the Notification controller via port 80 .","title":"Preflight Checks"},{"location":"getting_started/#installation","text":"Before using TF-controller, you have to install Flux by using either flux install or flux bootstrap command. Please note that TF-controller now requires Flux v0.32.0 or later, so please make sure you have the latest version of Flux. After that you can install TF-controller with Flux HelmRelease by: kubectl apply -f https://raw.githubusercontent.com/weaveworks/tf-controller/main/docs/release.yaml For the most recent release candidate of TF-controller, please use rc.yaml . kubectl apply -f https://raw.githubusercontent.com/weaveworks/tf-controller/main/docs/rc.yaml or manually with Helm by: # Add tf-controller helm repository helm repo add tf-controller https://weaveworks.github.io/tf-controller/ # Install tf-controller helm upgrade -i tf-controller tf-controller/tf-controller \\ --namespace flux-system For details on configurable parameters of the TF-controller chart, please see chart readme . Alternatively, you can install TF-controller via kubectl : export TF_CON_VER = v0.12.0 kubectl apply -f https://github.com/weaveworks/tf-controller/releases/download/ ${ TF_CON_VER } /tf-controller.crds.yaml kubectl apply -f https://github.com/weaveworks/tf-controller/releases/download/ ${ TF_CON_VER } /tf-controller.rbac.yaml kubectl apply -f https://github.com/weaveworks/tf-controller/releases/download/ ${ TF_CON_VER } /tf-controller.deployment.yaml","title":"Installation"},{"location":"getting_started/#quick-start","text":"Here's a simple example of how to GitOps your Terraform resources with TF-controller and Flux.","title":"Quick start"},{"location":"getting_started/#define-source","text":"First, we need to define a Source controller's source ( GitRepository , Bucket , OCIRepository ), for example: apiVersion : source.toolkit.fluxcd.io/v1beta1 kind : GitRepository metadata : name : helloworld namespace : flux-system spec : interval : 30s url : https://github.com/tf-controller/helloworld ref : branch : main","title":"Define source"},{"location":"getting_started/#the-gitops-automation-mode","text":"The GitOps automation mode could be enabled by setting .spec.approvePlan=auto . In this mode, Terraform resources will be planned, and automatically applied for you. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : interval : 1m approvePlan : auto path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system For a full list of features and how to use them, please follow the Use TF-controller guide.","title":"The GitOps Automation mode"},{"location":"getting_started/#other-examples","text":"A Terraform GitOps with Flux to automatically reconcile your AWS IAM Policies . GitOps an existing EKS cluster, by partially import its nodegroup and manage it with TF-controller: An EKS scaling example .","title":"Other Examples"},{"location":"tfctl/","text":"tfctl tfctl is a command-line utility to help with tf-controller operations. Installation You can download the tfctl binary via the GitHub releases page: https://github.com/weaveworks/tf-controller/releases Usage: tfctl [command] Available Commands: completion Generate the autocompletion script for the specified shell create Create a Terraform resource delete Delete a Terraform resource get Get Terraform resources help Help about any command install Install the tf-controller plan Plan a Terraform configuration reconcile Trigger a reconcile of the provided resource resume Resume reconciliation for the provided resource suspend Suspend reconciliation for the provided resource uninstall Uninstall the tf-controller version Prints tf-controller and tfctl version information Flags: -h, --help help for tfctl --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string The kubernetes namespace to use for CLI requests. (default \"flux-system\") --terraform string The location of the terraform binary. (default \"/usr/bin/terraform\") Use \"tfctl [command] --help\" for more information about a command.","title":"CLI References"},{"location":"tfctl/#tfctl","text":"tfctl is a command-line utility to help with tf-controller operations.","title":"tfctl"},{"location":"tfctl/#installation","text":"You can download the tfctl binary via the GitHub releases page: https://github.com/weaveworks/tf-controller/releases Usage: tfctl [command] Available Commands: completion Generate the autocompletion script for the specified shell create Create a Terraform resource delete Delete a Terraform resource get Get Terraform resources help Help about any command install Install the tf-controller plan Plan a Terraform configuration reconcile Trigger a reconcile of the provided resource resume Resume reconciliation for the provided resource suspend Suspend reconciliation for the provided resource uninstall Uninstall the tf-controller version Prints tf-controller and tfctl version information Flags: -h, --help help for tfctl --kubeconfig string Path to the kubeconfig file to use for CLI requests. -n, --namespace string The kubernetes namespace to use for CLI requests. (default \"flux-system\") --terraform string The location of the terraform binary. (default \"/usr/bin/terraform\") Use \"tfctl [command] --help\" for more information about a command.","title":"Installation"},{"location":"References/terraform/","text":"Terraform API reference Packages: infra.contrib.fluxcd.io/v1alpha1 infra.contrib.fluxcd.io/v1alpha1 Resource Types: BackendConfigSpec ( Appears on: TerraformSpec ) BackendConfigSpec is for specifying configuration for Terraform\u2019s Kubernetes backend Field Description disable bool (Optional) Disable is to completely disable the backend configuration. secretSuffix string (Optional) inClusterConfig bool (Optional) customConfiguration string (Optional) configPath string (Optional) labels map[string]string (Optional) BackendConfigsReference ( Appears on: TerraformSpec ) Field Description kind string Kind of the values referent, valid values are (\u2018Secret\u2019, \u2018ConfigMap\u2019). name string Name of the configs referent. Should reside in the same namespace as the referring resource. keys []string (Optional) Keys is the data key where a specific value can be found at. Defaults to all keys. optional bool (Optional) Optional marks this BackendConfigsReference as optional. When set, a not found error for the values reference is ignored, but any Key or transient error will still result in a reconciliation failure. CrossNamespaceSourceReference ( Appears on: TerraformSpec ) CrossNamespaceSourceReference contains enough information to let you locate the typed Kubernetes resource object at cluster level. Field Description apiVersion string (Optional) API version of the referent. kind string Kind of the referent. name string Name of the referent. namespace string (Optional) Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference. FileMapping ( Appears on: TerraformSpec ) Field Description secretRef github.com/fluxcd/pkg/apis/meta.SecretKeyReference Reference to a Secret that contains the file content location string Location can be either user\u2019s home directory or the Terraform workspace path string Path of the file - relative to the \u201clocation\u201d ForceUnlockEnum ( string alias) ( Appears on: TFStateSpec ) HealthCheck ( Appears on: TerraformSpec ) HealthCheck contains configuration needed to perform a health check after terraform is applied. Field Description name string Name of the health check. type string Type of the health check, valid values are (\u2018tcp\u2019, \u2018http\u2019). If tcp is specified, address is required. If http is specified, url is required. url string (Optional) URL to perform http health check on. Required when http type is specified. Go template can be used to reference values from the terraform output (e.g. https://example.org , {{.output_url}}). address string (Optional) Address to perform tcp health check on. Required when tcp type is specified. Go template can be used to reference values from the terraform output (e.g. 127.0.0.1:8080, {{.address}}:{{.port}}). timeout Kubernetes meta/v1.Duration (Optional) The timeout period at which the connection should timeout if unable to complete the request. When not specified, default 20s timeout is used. LockStatus ( Appears on: TerraformStatus ) LockStatus defines the observed state of a Terraform State Lock Field Description lastApplied string (Optional) pending string (Optional) Pending holds the identifier of the Lock Holder to be used with Force Unlock PlanStatus ( Appears on: TerraformStatus ) Field Description lastApplied string (Optional) pending string (Optional) isDestroyPlan bool (Optional) isDriftDetectionPlan bool (Optional) ResourceInventory ( Appears on: TerraformStatus ) ResourceInventory contains a list of Kubernetes resource object references that have been applied by a Kustomization. Field Description entries []ResourceRef Entries of Kubernetes resource object references. ResourceRef ( Appears on: ResourceInventory ) ResourceRef contains the information necessary to locate a resource within a cluster. Field Description n string Terraform resource\u2019s name. t string Type is Terraform resource\u2019s type id string ID is the resource identifier. This is cloud-specific. For example, ARN is an ID on AWS. RunnerPodMetadata ( Appears on: RunnerPodTemplate ) Field Description labels map[string]string (Optional) Labels to add to the runner pod annotations map[string]string (Optional) Annotations to add to the runner pod RunnerPodSpec ( Appears on: RunnerPodTemplate ) Field Description image string (Optional) Runner pod image to use other than default envFrom []Kubernetes core/v1.EnvFromSource (Optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated. env []Kubernetes core/v1.EnvVar (Optional) List of environment variables to set in the container. Cannot be updated. nodeSelector map[string]string (Optional) Set the NodeSelector for the Runner Pod affinity Kubernetes core/v1.Affinity (Optional) Set the Affinity for the Runner Pod tolerations []Kubernetes core/v1.Toleration (Optional) Set the Tolerations for the Runner Pod volumeMounts []Kubernetes core/v1.VolumeMount (Optional) Set Volume Mounts for the Runner Pod volumes []Kubernetes core/v1.Volume (Optional) Set Volumes for the Runner Pod RunnerPodTemplate ( Appears on: TerraformSpec ) Field Description metadata RunnerPodMetadata (Optional) spec RunnerPodSpec (Optional) image string (Optional) Runner pod image to use other than default envFrom []Kubernetes core/v1.EnvFromSource (Optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated. env []Kubernetes core/v1.EnvVar (Optional) List of environment variables to set in the container. Cannot be updated. nodeSelector map[string]string (Optional) Set the NodeSelector for the Runner Pod affinity Kubernetes core/v1.Affinity (Optional) Set the Affinity for the Runner Pod tolerations []Kubernetes core/v1.Toleration (Optional) Set the Tolerations for the Runner Pod volumeMounts []Kubernetes core/v1.VolumeMount (Optional) Set Volume Mounts for the Runner Pod volumes []Kubernetes core/v1.Volume (Optional) Set Volumes for the Runner Pod TFStateSpec ( Appears on: TerraformSpec ) TFStateSpec allows the user to set ForceUnlock Field Description forceUnlock ForceUnlockEnum (Optional) ForceUnlock a Terraform state if it has become locked for any reason. Defaults to no . This is an Enum and has the expected values of: auto yes no WARNING: Only use auto in the cases where you are absolutely certain that no other system is using this state, you could otherwise end up in a bad place See https://www.terraform.io/language/state/locking#force-unlock for more information on the terraform state lock and force unlock. lockIdentifier string (Optional) LockIdentifier holds the Identifier required by Terraform to unlock the state if it ever gets into a locked state. You\u2019ll need to put the Lock Identifier in here while setting ForceUnlock to either yes or auto . Leave this empty to do nothing, set this to the value of the Lock Info: ID: [value] , e.g. f2ab685b-f84d-ac0b-a125-378a22877e8d , to force unlock the state. Terraform Terraform is the Schema for the terraforms API Field Description metadata Kubernetes meta/v1.ObjectMeta Refer to the Kubernetes API documentation for the fields of the metadata field. spec TerraformSpec approvePlan string (Optional) ApprovePlan specifies name of a plan wanted to approve. If its value is \u201cauto\u201d, the controller will automatically approve every plan. destroy bool (Optional) Destroy produces a destroy plan. Applying the plan will destroy all resources. backendConfig BackendConfigSpec (Optional) backendConfigsFrom []BackendConfigsReference (Optional) workspace string (Optional) vars []Variable (Optional) List of input variables to set for the Terraform program. varsFrom []VarsReference (Optional) List of references to a Secret or a ConfigMap to generate variables for Terraform resources based on its data, selectively by varsKey. Values of the later Secret / ConfigMap with the same keys will override those of the former. values Kubernetes pkg/apis/apiextensions/v1.JSON (Optional) Values map to the Terraform variable \u201cvalues\u201d, which is an object of arbitrary values. It is a convenient way to pass values to Terraform resources without having to define a variable for each value. To use this feature, your Terraform file must define the variable \u201cvalues\u201d. fileMappings []FileMapping (Optional) List of all configuration files to be created in initialization. interval Kubernetes meta/v1.Duration The interval at which to reconcile the Terraform. retryInterval Kubernetes meta/v1.Duration (Optional) The interval at which to retry a previously failed reconciliation. When not specified, the controller uses the TerraformSpec.Interval value to retry failures. path string (Optional) Path to the directory containing Terraform (.tf) files. Defaults to \u2018None\u2019, which translates to the root path of the SourceRef. sourceRef CrossNamespaceSourceReference SourceRef is the reference of the source where the Terraform files are stored. suspend bool (Optional) Suspend is to tell the controller to suspend subsequent TF executions, it does not apply to already started executions. Defaults to false. force bool (Optional) Force instructs the controller to unconditionally re-plan and re-apply TF resources. Defaults to false. writeOutputsToSecret WriteOutputsToSecretSpec (Optional) A list of target secrets for the outputs to be written as. disableDriftDetection bool (Optional) Disable automatic drift detection. Drift detection may be resource intensive in the context of a large cluster or complex Terraform statefile. Defaults to false. cliConfigSecretRef Kubernetes core/v1.SecretReference (Optional) healthChecks []HealthCheck (Optional) List of health checks to be performed. destroyResourcesOnDeletion bool (Optional) Create destroy plan and apply it to destroy terraform resources upon deletion of this object. Defaults to false. serviceAccountName string (Optional) Name of a ServiceAccount for the runner Pod to provision Terraform resources. Default to tf-runner. alwaysCleanupRunnerPod bool (Optional) Clean the runner pod up after each reconciliation cycle runnerTerminationGracePeriodSeconds int64 (Optional) Configure the termination grace period for the runner pod. Use this parameter to allow the Terraform process to gracefully shutdown. Consider increasing for large, complex or slow-moving Terraform managed resources. refreshBeforeApply bool (Optional) RefreshBeforeApply forces refreshing of the state before the apply step. runnerPodTemplate RunnerPodTemplate (Optional) enableInventory bool (Optional) EnableInventory enables the object to store resource entries as the inventory for external use. tfstate TFStateSpec (Optional) targets []string (Optional) Targets specify the resource, module or collection of resources to target. storeReadablePlan string (Optional) StoreReadablePlan enables storing the plan in a readable format. webhooks []Webhook (Optional) status TerraformStatus TerraformSpec ( Appears on: Terraform ) TerraformSpec defines the desired state of Terraform Field Description approvePlan string (Optional) ApprovePlan specifies name of a plan wanted to approve. If its value is \u201cauto\u201d, the controller will automatically approve every plan. destroy bool (Optional) Destroy produces a destroy plan. Applying the plan will destroy all resources. backendConfig BackendConfigSpec (Optional) backendConfigsFrom []BackendConfigsReference (Optional) workspace string (Optional) vars []Variable (Optional) List of input variables to set for the Terraform program. varsFrom []VarsReference (Optional) List of references to a Secret or a ConfigMap to generate variables for Terraform resources based on its data, selectively by varsKey. Values of the later Secret / ConfigMap with the same keys will override those of the former. values Kubernetes pkg/apis/apiextensions/v1.JSON (Optional) Values map to the Terraform variable \u201cvalues\u201d, which is an object of arbitrary values. It is a convenient way to pass values to Terraform resources without having to define a variable for each value. To use this feature, your Terraform file must define the variable \u201cvalues\u201d. fileMappings []FileMapping (Optional) List of all configuration files to be created in initialization. interval Kubernetes meta/v1.Duration The interval at which to reconcile the Terraform. retryInterval Kubernetes meta/v1.Duration (Optional) The interval at which to retry a previously failed reconciliation. When not specified, the controller uses the TerraformSpec.Interval value to retry failures. path string (Optional) Path to the directory containing Terraform (.tf) files. Defaults to \u2018None\u2019, which translates to the root path of the SourceRef. sourceRef CrossNamespaceSourceReference SourceRef is the reference of the source where the Terraform files are stored. suspend bool (Optional) Suspend is to tell the controller to suspend subsequent TF executions, it does not apply to already started executions. Defaults to false. force bool (Optional) Force instructs the controller to unconditionally re-plan and re-apply TF resources. Defaults to false. writeOutputsToSecret WriteOutputsToSecretSpec (Optional) A list of target secrets for the outputs to be written as. disableDriftDetection bool (Optional) Disable automatic drift detection. Drift detection may be resource intensive in the context of a large cluster or complex Terraform statefile. Defaults to false. cliConfigSecretRef Kubernetes core/v1.SecretReference (Optional) healthChecks []HealthCheck (Optional) List of health checks to be performed. destroyResourcesOnDeletion bool (Optional) Create destroy plan and apply it to destroy terraform resources upon deletion of this object. Defaults to false. serviceAccountName string (Optional) Name of a ServiceAccount for the runner Pod to provision Terraform resources. Default to tf-runner. alwaysCleanupRunnerPod bool (Optional) Clean the runner pod up after each reconciliation cycle runnerTerminationGracePeriodSeconds int64 (Optional) Configure the termination grace period for the runner pod. Use this parameter to allow the Terraform process to gracefully shutdown. Consider increasing for large, complex or slow-moving Terraform managed resources. refreshBeforeApply bool (Optional) RefreshBeforeApply forces refreshing of the state before the apply step. runnerPodTemplate RunnerPodTemplate (Optional) enableInventory bool (Optional) EnableInventory enables the object to store resource entries as the inventory for external use. tfstate TFStateSpec (Optional) targets []string (Optional) Targets specify the resource, module or collection of resources to target. storeReadablePlan string (Optional) StoreReadablePlan enables storing the plan in a readable format. webhooks []Webhook (Optional) TerraformStatus ( Appears on: Terraform ) TerraformStatus defines the observed state of Terraform Field Description ReconcileRequestStatus github.com/fluxcd/pkg/apis/meta.ReconcileRequestStatus (Members of ReconcileRequestStatus are embedded into this type.) observedGeneration int64 (Optional) ObservedGeneration is the last reconciled generation. conditions []Kubernetes meta/v1.Condition (Optional) lastAppliedRevision string (Optional) The last successfully applied revision. The revision format for Git sources is / . lastAttemptedRevision string (Optional) LastAttemptedRevision is the revision of the last reconciliation attempt. lastPlannedRevision string (Optional) LastPlannedRevision is the revision used by the last planning process. The result could be either no plan change or a new plan generated. lastDriftDetectedAt Kubernetes meta/v1.Time (Optional) LastDriftDetectedAt is the time when the last drift was detected lastAppliedByDriftDetectionAt Kubernetes meta/v1.Time (Optional) LastAppliedByDriftDetectionAt is the time when the last drift was detected and terraform apply was performed as a result availableOutputs []string (Optional) plan PlanStatus (Optional) inventory ResourceInventory (Optional) Inventory contains the list of Terraform resource object references that have been successfully applied. lock LockStatus (Optional) Variable ( Appears on: TerraformSpec ) Field Description name string Name is the name of the variable value Kubernetes pkg/apis/apiextensions/v1.JSON (Optional) valueFrom Kubernetes core/v1.EnvVarSource (Optional) VarsReference ( Appears on: TerraformSpec ) VarsReference contain a reference of a Secret or a ConfigMap to generate variables for Terraform resources based on its data, selectively by varsKey. Field Description kind string Kind of the values referent, valid values are (\u2018Secret\u2019, \u2018ConfigMap\u2019). name string Name of the values referent. Should reside in the same namespace as the referring resource. varsKeys []string (Optional) VarsKeys is the data key at which a specific value can be found. Defaults to all keys. optional bool (Optional) Optional marks this VarsReference as optional. When set, a not found error for the values reference is ignored, but any VarsKey or transient error will still result in a reconciliation failure. Webhook ( Appears on: TerraformSpec ) Field Description stage string enabled bool (Optional) url string payloadType string (Optional) errorMessageTemplate string (Optional) testExpression string WriteOutputsToSecretSpec ( Appears on: TerraformSpec ) WriteOutputsToSecretSpec defines where to store outputs, and which outputs to be stored. Field Description name string Name is the name of the Secret to be written outputs []string (Optional) Outputs contain the selected names of outputs to be written to the secret. Empty array means writing all outputs, which is default. This page was automatically generated with gen-crd-api-reference-docs","title":"API References"},{"location":"how_to/","text":"How to How to backup and restore a Terraform state","title":"How to"},{"location":"how_to/#how-to","text":"How to backup and restore a Terraform state","title":"How to"},{"location":"how_to/backup_and_restore_a_Terraform_state/","text":"Backup and restore a Terraform state Backup the tfstate Assume that we have the my-stack Terraform object with its .spec.workspace set to \"default\". kubectl get terraform NAME READY STATUS AGE my-stack Unknown Initializing 28s We can backup its tfstate out of the cluster, like this: WORKSPACE = default NAME = my-stack kubectl get secret tfstate- ${ WORKSPACE } - ${ NAME } \\ -ojsonpath = '{.data.tfstate}' \\ | base64 -d | gzip -d > terraform.tfstate Restore the tfstate To restore the tfstate file or import an existing tfstate file to the cluster, we can use the following operation: gzip terraform.tfstate WORKSPACE = default NAME = my-stack kubectl create secret \\ generic tfstate- ${ WORKSPACE } - ${ NAME } \\ --from-file = tfstate = terraform.tfstate.gz \\ --dry-run = client -o = yaml \\ | yq e '.metadata.annotations[\"encoding\"]=\"gzip\"' - \\ > tfstate- ${ WORKSPACE } - ${ NAME } .yaml kubectl apply -f tfstate- ${ WORKSPACE } - ${ NAME } .yaml","title":"Backup and restore a Terraform state"},{"location":"how_to/backup_and_restore_a_Terraform_state/#backup-and-restore-a-terraform-state","text":"","title":"Backup and restore a Terraform state"},{"location":"how_to/backup_and_restore_a_Terraform_state/#backup-the-tfstate","text":"Assume that we have the my-stack Terraform object with its .spec.workspace set to \"default\". kubectl get terraform NAME READY STATUS AGE my-stack Unknown Initializing 28s We can backup its tfstate out of the cluster, like this: WORKSPACE = default NAME = my-stack kubectl get secret tfstate- ${ WORKSPACE } - ${ NAME } \\ -ojsonpath = '{.data.tfstate}' \\ | base64 -d | gzip -d > terraform.tfstate","title":"Backup the tfstate"},{"location":"how_to/backup_and_restore_a_Terraform_state/#restore-the-tfstate","text":"To restore the tfstate file or import an existing tfstate file to the cluster, we can use the following operation: gzip terraform.tfstate WORKSPACE = default NAME = my-stack kubectl create secret \\ generic tfstate- ${ WORKSPACE } - ${ NAME } \\ --from-file = tfstate = terraform.tfstate.gz \\ --dry-run = client -o = yaml \\ | yq e '.metadata.annotations[\"encoding\"]=\"gzip\"' - \\ > tfstate- ${ WORKSPACE } - ${ NAME } .yaml kubectl apply -f tfstate- ${ WORKSPACE } - ${ NAME } .yaml","title":"Restore the tfstate"},{"location":"use_tf_controller/","text":"Use TF-controller Use TF-controller to plan and manually apply Terraform resources Use TF-controller to provision resources and obtain outputs Use TF-controller to detect drifts only without plan or apply Use TF-controller with drift detection disabled Use TF-controller with AWS EKS IRSA Use TF-controller to set variables for Terraform resources Use TF-controller with a custom backend Use TF-controller with an OCI Artifact as Source Use TF-controller to provision Terraform resources that are required health checks Use TF-controller to provision resources and destroy them when the Terraform object gets deleted Use TF-controller to force unlock Terraform states Use TF-controller to provision resources with customized Runner Pods Use TF-controller with Terraform Enterprise","title":"Use TF-controller"},{"location":"use_tf_controller/#use-tf-controller","text":"Use TF-controller to plan and manually apply Terraform resources Use TF-controller to provision resources and obtain outputs Use TF-controller to detect drifts only without plan or apply Use TF-controller with drift detection disabled Use TF-controller with AWS EKS IRSA Use TF-controller to set variables for Terraform resources Use TF-controller with a custom backend Use TF-controller with an OCI Artifact as Source Use TF-controller to provision Terraform resources that are required health checks Use TF-controller to provision resources and destroy them when the Terraform object gets deleted Use TF-controller to force unlock Terraform states Use TF-controller to provision resources with customized Runner Pods Use TF-controller with Terraform Enterprise","title":"Use TF-controller"},{"location":"use_tf_controller/to_detect_drifts_only_without_plan_or_apply/","text":"Use TF-controller to detect drifts only without plan or apply We can set .spec.approvePlan to disable to tell the controller to detect drifts of your Terraform resources only. Doing so will skip the plan and apply stages. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : hello-world namespace : flux-system spec : approvePlan : disable interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system","title":"To detect drifts only without plan or apply"},{"location":"use_tf_controller/to_detect_drifts_only_without_plan_or_apply/#use-tf-controller-to-detect-drifts-only-without-plan-or-apply","text":"We can set .spec.approvePlan to disable to tell the controller to detect drifts of your Terraform resources only. Doing so will skip the plan and apply stages. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : hello-world namespace : flux-system spec : approvePlan : disable interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system","title":"Use TF-controller to detect drifts only without plan or apply"},{"location":"use_tf_controller/to_force_unlock_Terraform_states/","text":"Use TF-controller to force unlock Terraform states In some situations, you may need to perform the Terraform force-unlock operation on the tfstate inside the cluster. There are three possible values of .spec.tfstate.forceUnlock , which are yes , no , and auto . The default value is no , which means that you disable this behavour. The auto force-unlock mode will automatically use the lock identifier produced by the associated state file instead of specified lock identifier. The recommended way is to do manual force unlock. To manually force-unlock , you need to: set forceUnlock to yes , and specify a lock identifier to unlock a specific locked state, as the following example: apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system tfstate : forceUnlock : \"yes\" lockIdentifier : f2ab685b-f84d-ac0b-a125-378a22877e8d","title":"Use TF-controller to force unlock Terraform states"},{"location":"use_tf_controller/to_force_unlock_Terraform_states/#use-tf-controller-to-force-unlock-terraform-states","text":"In some situations, you may need to perform the Terraform force-unlock operation on the tfstate inside the cluster. There are three possible values of .spec.tfstate.forceUnlock , which are yes , no , and auto . The default value is no , which means that you disable this behavour. The auto force-unlock mode will automatically use the lock identifier produced by the associated state file instead of specified lock identifier. The recommended way is to do manual force unlock. To manually force-unlock , you need to: set forceUnlock to yes , and specify a lock identifier to unlock a specific locked state, as the following example: apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system tfstate : forceUnlock : \"yes\" lockIdentifier : f2ab685b-f84d-ac0b-a125-378a22877e8d","title":"Use TF-controller to force unlock Terraform states"},{"location":"use_tf_controller/to_plan_and_manually_apply_Terraform_resources/","text":"Use TF-controller to plan and manually apply Terraform resources Assume that you have a GitRepository object named helloworld pointing to a Git repository, and you want to plan and apply the Terraform resources under ./ of that Git repo. For the plan & manual approval workflow, please start by either setting .spec.approvePlan to be the blank value, or omitting the field. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : \"\" # or you can omit this field interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system Then after a reconciliation loop, the controller will generate a plan, and tell you how to use field .spec.approvePlan to approve the plan. You can run the following command to obtain that message. kubectl -n flux-system get tf/helloworld After making change and push, it will apply the plan to create real resources. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : hello-world namespace : flux-system spec : approvePlan : plan-main-b8e362c206 # first 8 digits of a commit hash is enough interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system","title":"Use TF-controller to plan and manually apply Terraform resources"},{"location":"use_tf_controller/to_plan_and_manually_apply_Terraform_resources/#use-tf-controller-to-plan-and-manually-apply-terraform-resources","text":"Assume that you have a GitRepository object named helloworld pointing to a Git repository, and you want to plan and apply the Terraform resources under ./ of that Git repo. For the plan & manual approval workflow, please start by either setting .spec.approvePlan to be the blank value, or omitting the field. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : \"\" # or you can omit this field interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system Then after a reconciliation loop, the controller will generate a plan, and tell you how to use field .spec.approvePlan to approve the plan. You can run the following command to obtain that message. kubectl -n flux-system get tf/helloworld After making change and push, it will apply the plan to create real resources. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : hello-world namespace : flux-system spec : approvePlan : plan-main-b8e362c206 # first 8 digits of a commit hash is enough interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system","title":"Use TF-controller to plan and manually apply Terraform resources"},{"location":"use_tf_controller/to_provision_Terraform_resources_that_are_required_health_checks/","text":"Use TF-controller to provision Terraform resources that are required health checks For some Terraform resources, it may be useful to perform health checks on them to verify that they are ready to accept connection before the terraform goes into Ready state: For example, our Terraform file is provisioned and contains the following outputs. # main.tf output \"rdsAddress\" { value = \"mydb.xyz.us-east-1.rds.amazonaws.com\" } output \"rdsPort\" { value = \"3306\" } output \"myappURL\" { value = \"https://example.com/\" } We can use standard Go template expressions, like {{.rdsAddress}} , to refer to those output values and use them to verify that the resources are up and running. We support two types of health checks, tcp amd http . The tcp type allows us to verify a TCP connection, while the http type is for verify an HTTP URL. The default timeout of each health check is 20 seconds. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system healthChecks : - name : rds type : tcp address : \"{{.rdsAddress}}:{{.rdsPort}}\" timeout : 10s # optional, defaults to 20s - name : myapp type : http url : \"{{.myappURL}}\" timeout : 5s - name : url_not_from_output type : http url : \"https://example.org\"","title":"Use TF-controller to provision Terraform resources that are required health checks"},{"location":"use_tf_controller/to_provision_Terraform_resources_that_are_required_health_checks/#use-tf-controller-to-provision-terraform-resources-that-are-required-health-checks","text":"For some Terraform resources, it may be useful to perform health checks on them to verify that they are ready to accept connection before the terraform goes into Ready state: For example, our Terraform file is provisioned and contains the following outputs. # main.tf output \"rdsAddress\" { value = \"mydb.xyz.us-east-1.rds.amazonaws.com\" } output \"rdsPort\" { value = \"3306\" } output \"myappURL\" { value = \"https://example.com/\" } We can use standard Go template expressions, like {{.rdsAddress}} , to refer to those output values and use them to verify that the resources are up and running. We support two types of health checks, tcp amd http . The tcp type allows us to verify a TCP connection, while the http type is for verify an HTTP URL. The default timeout of each health check is 20 seconds. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system healthChecks : - name : rds type : tcp address : \"{{.rdsAddress}}:{{.rdsPort}}\" timeout : 10s # optional, defaults to 20s - name : myapp type : http url : \"{{.myappURL}}\" timeout : 5s - name : url_not_from_output type : http url : \"https://example.org\"","title":"Use TF-controller to provision Terraform resources that are required health checks"},{"location":"use_tf_controller/to_provision_resources_and_destroy_them_when_the_Terraform_object_gets_deleted/","text":"Use TF-controller to provision resources and destroy them when the Terraform object gets deleted The resources provisioned by a Terraform object are not destroyed by default, and the tfstate of that Terraform object still remains in the cluster. It means that you are safe to delete the Terraform object in the cluster and re-create it. If you re-create a new Terraform object with the same name, namespace and workspace, it will continue to use the tfstate inside the cluster as the starting point to renconcle. However, you may want to destroy provisioned resources when delete the Terraform object in many scenaros. To enable destroy resources on object deletion, set .spec.destroyResourcesOnDeletion to true . ~> WARNING: This feature will destroy your resources on the cloud if the Terraform object gets deleted. Please use it with cautions. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto destroyResourcesOnDeletion : true interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system","title":"Use TF-controller to provision resources and destroy them when the Terraform object gets deleted"},{"location":"use_tf_controller/to_provision_resources_and_destroy_them_when_the_Terraform_object_gets_deleted/#use-tf-controller-to-provision-resources-and-destroy-them-when-the-terraform-object-gets-deleted","text":"The resources provisioned by a Terraform object are not destroyed by default, and the tfstate of that Terraform object still remains in the cluster. It means that you are safe to delete the Terraform object in the cluster and re-create it. If you re-create a new Terraform object with the same name, namespace and workspace, it will continue to use the tfstate inside the cluster as the starting point to renconcle. However, you may want to destroy provisioned resources when delete the Terraform object in many scenaros. To enable destroy resources on object deletion, set .spec.destroyResourcesOnDeletion to true . ~> WARNING: This feature will destroy your resources on the cloud if the Terraform object gets deleted. Please use it with cautions. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto destroyResourcesOnDeletion : true interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system","title":"Use TF-controller to provision resources and destroy them when the Terraform object gets deleted"},{"location":"use_tf_controller/to_provision_resources_and_obtain_outputs/","text":"Use TF-controller to provision resources and obtain outputs Outputs created by Terraform can be written to a secret using .spec.writeOutputsToSecret . Write all outputs We can specify a target secret in .spec.writeOutputsToSecret.name , and the controller will write all outputs to the secret by default. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system writeOutputsToSecret : name : helloworld-output Write outputs selectively We can choose only a subset of outputs by specify output names we'd like to write in the .spec.writeOutputsToSecret.outputs array. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system writeOutputsToSecret : name : helloworld-output outputs : - hello_world - my_sensitive_data Rename outputs Some time we'd like to use rename an output, so that it can be consumed by other Kubernetes controllers. For example, we might retrieve a key from a Secret manager, and it's an AGE key, which must be ending with \".agekey\" in the secret. In this case, we need to rename the output. TF-controller supports mapping output name using the old_name:new_name format. In the following example, we renamed age_key output as age.agekey entry for the helloworld-output Secret's data, so that other components in the GitOps pipeline could consume it. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system writeOutputsToSecret : name : helloworld-output outputs : - age_key:age.agekey","title":"Use TF-controller to provision resources and obtain outputs"},{"location":"use_tf_controller/to_provision_resources_and_obtain_outputs/#use-tf-controller-to-provision-resources-and-obtain-outputs","text":"Outputs created by Terraform can be written to a secret using .spec.writeOutputsToSecret .","title":"Use TF-controller to provision resources and obtain outputs"},{"location":"use_tf_controller/to_provision_resources_and_obtain_outputs/#write-all-outputs","text":"We can specify a target secret in .spec.writeOutputsToSecret.name , and the controller will write all outputs to the secret by default. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system writeOutputsToSecret : name : helloworld-output","title":"Write all outputs"},{"location":"use_tf_controller/to_provision_resources_and_obtain_outputs/#write-outputs-selectively","text":"We can choose only a subset of outputs by specify output names we'd like to write in the .spec.writeOutputsToSecret.outputs array. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system writeOutputsToSecret : name : helloworld-output outputs : - hello_world - my_sensitive_data","title":"Write outputs selectively"},{"location":"use_tf_controller/to_provision_resources_and_obtain_outputs/#rename-outputs","text":"Some time we'd like to use rename an output, so that it can be consumed by other Kubernetes controllers. For example, we might retrieve a key from a Secret manager, and it's an AGE key, which must be ending with \".agekey\" in the secret. In this case, we need to rename the output. TF-controller supports mapping output name using the old_name:new_name format. In the following example, we renamed age_key output as age.agekey entry for the helloworld-output Secret's data, so that other components in the GitOps pipeline could consume it. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system writeOutputsToSecret : name : helloworld-output outputs : - age_key:age.agekey","title":"Rename outputs"},{"location":"use_tf_controller/to_provision_resources_with_customized_Runner_Pods/","text":"Use TF-controller to provision resources with customized Runner Pods Customize Runner Pod's metadata In some situations, it is needed to add custom labels and annotations to the runner pod used to reconcile Terraform. For example, for Azure AKS to grant pod active directory permissions using Azure Active Directory (AAD) Pod Identity, a label like aadpodidbinding: myIdentity on the pod is required. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system runnerPodTemplate : metadata : labels : aadpodidbinding : myIdentity annotations : company.com/abc : xyz Customize Runner Pod Image By default, the Terraform controller uses RUNNER_POD_IMAGE environment variable to identify the Runner Pod's image to use. You can customize the image on the global level by updating the value of the environment variable or, you can specify an image to use per Terraform object for its reconciliation. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system runnerPodTemplate : spec : image : registry.io/tf-runner:xyz You can use runner.Dockerfile as a basis of customizing runner pod image. Customize Runner Pod Specifications You can also customize various Runner Pod spec fields to control and configure how the Runner Pod runs. For example, you can configure Runner Pod spec affinity and tolerations if you need to run in on a specific set of nodes. Please see RunnerPodSpec for a list of the configurable Runner Pod spec fields.","title":"Use TF-controller to provision resources with customized Runner Pods"},{"location":"use_tf_controller/to_provision_resources_with_customized_Runner_Pods/#use-tf-controller-to-provision-resources-with-customized-runner-pods","text":"","title":"Use TF-controller to provision resources with customized Runner Pods"},{"location":"use_tf_controller/to_provision_resources_with_customized_Runner_Pods/#customize-runner-pods-metadata","text":"In some situations, it is needed to add custom labels and annotations to the runner pod used to reconcile Terraform. For example, for Azure AKS to grant pod active directory permissions using Azure Active Directory (AAD) Pod Identity, a label like aadpodidbinding: myIdentity on the pod is required. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system runnerPodTemplate : metadata : labels : aadpodidbinding : myIdentity annotations : company.com/abc : xyz","title":"Customize Runner Pod's metadata"},{"location":"use_tf_controller/to_provision_resources_with_customized_Runner_Pods/#customize-runner-pod-image","text":"By default, the Terraform controller uses RUNNER_POD_IMAGE environment variable to identify the Runner Pod's image to use. You can customize the image on the global level by updating the value of the environment variable or, you can specify an image to use per Terraform object for its reconciliation. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system runnerPodTemplate : spec : image : registry.io/tf-runner:xyz You can use runner.Dockerfile as a basis of customizing runner pod image.","title":"Customize Runner Pod Image"},{"location":"use_tf_controller/to_provision_resources_with_customized_Runner_Pods/#customize-runner-pod-specifications","text":"You can also customize various Runner Pod spec fields to control and configure how the Runner Pod runs. For example, you can configure Runner Pod spec affinity and tolerations if you need to run in on a specific set of nodes. Please see RunnerPodSpec for a list of the configurable Runner Pod spec fields.","title":"Customize Runner Pod Specifications"},{"location":"use_tf_controller/to_set_variables_for_Terraform_resources/","text":"Use TF-controller to set variables for Terraform resources ~> BREAKING CHANGE : This is a breaking change of the v1alpha1 API. Users who are upgrading from TF-controller <= 0.7.0 require updating varsFrom , from a single object: varsFrom : kind : ConfigMap name : cluster-config to be an array of object, like this: varsFrom : - kind : ConfigMap name : cluster-config vars and varsFrom You can pass variables to Terraform using the vars and varsFrom fields. Inline variables can be set using vars . The varsFrom field accepts a list of ConfigMaps / Secrets. You may use the varsKeys property of varsFrom to select specific keys from the input or omit this field to select all keys from the input source. Note that in the case of the same variable key being passed multiple times, the controller will use the lattermost instance of the key passed to varsFrom . apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system vars : - name : region value : us-east-1 - name : env value : dev - name : instanceType value : t3-small varsFrom : - kind : ConfigMap name : cluster-config varsKeys : - nodeCount - instanceType - kind : Secret name : cluster-creds Variable value as HCL The vars field supports HCL string, number, bool, object and list types. For example, the following variable can be populated using the accompanying Terraform spec: variable \"cluster_spec\" { type = object({ region = string env = string node_count = number public = bool }) } apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system vars : - name : cluster_spec value : region : us-east-1 env : dev node_count : 10 public : false","title":"Use TF-controller to set variables for Terraform resources"},{"location":"use_tf_controller/to_set_variables_for_Terraform_resources/#use-tf-controller-to-set-variables-for-terraform-resources","text":"~> BREAKING CHANGE : This is a breaking change of the v1alpha1 API. Users who are upgrading from TF-controller <= 0.7.0 require updating varsFrom , from a single object: varsFrom : kind : ConfigMap name : cluster-config to be an array of object, like this: varsFrom : - kind : ConfigMap name : cluster-config","title":"Use TF-controller to set variables for Terraform resources"},{"location":"use_tf_controller/to_set_variables_for_Terraform_resources/#vars-and-varsfrom","text":"You can pass variables to Terraform using the vars and varsFrom fields. Inline variables can be set using vars . The varsFrom field accepts a list of ConfigMaps / Secrets. You may use the varsKeys property of varsFrom to select specific keys from the input or omit this field to select all keys from the input source. Note that in the case of the same variable key being passed multiple times, the controller will use the lattermost instance of the key passed to varsFrom . apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system vars : - name : region value : us-east-1 - name : env value : dev - name : instanceType value : t3-small varsFrom : - kind : ConfigMap name : cluster-config varsKeys : - nodeCount - instanceType - kind : Secret name : cluster-creds","title":"vars and varsFrom"},{"location":"use_tf_controller/to_set_variables_for_Terraform_resources/#variable-value-as-hcl","text":"The vars field supports HCL string, number, bool, object and list types. For example, the following variable can be populated using the accompanying Terraform spec: variable \"cluster_spec\" { type = object({ region = string env = string node_count = number public = bool }) } apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system vars : - name : cluster_spec value : region : us-east-1 env : dev node_count : 10 public : false","title":"Variable value as HCL"},{"location":"use_tf_controller/with_AWS_EKS_IRSA/","text":"Use TF-controller with AWS EKS IRSA AWS Elastic Kubernetes Service (EKS) offers IAM Roles for Service Accounts (IRSA) as a mechanism by which to provide credentials to Kubernetes pods. This can be used to provide the required AWS credentials to Terraform runners for performing plans and applies. You can use eksctl to associate an OIDC provider with your EKS cluster, for example: eksctl utils associate-iam-oidc-provider --cluster CLUSTER_NAME --approve Then follow the instructions here to add a trust policy to the IAM role which grants the necessary permissions for Terraform. Please note that if you have installed the controller following the README, then the namespace:serviceaccountname will be flux-system:tf-runner . You'll obtain a Role ARN to use in the next step. Finally, annotate the ServiceAccount for the tf-runner with the obtained Role ARN in your cluster: kubectl annotate -n flux-system serviceaccount tf-runner eks.amazonaws.com/role-arn = ROLE_ARN If deploying the tf-controller via Helm, this can be accomplished as follows: values : runner : serviceAccount : annotations : eks.amazonaws.com/role-arn : ROLE_ARN","title":"Use TF-controller with AWS EKS IRSA"},{"location":"use_tf_controller/with_AWS_EKS_IRSA/#use-tf-controller-with-aws-eks-irsa","text":"AWS Elastic Kubernetes Service (EKS) offers IAM Roles for Service Accounts (IRSA) as a mechanism by which to provide credentials to Kubernetes pods. This can be used to provide the required AWS credentials to Terraform runners for performing plans and applies. You can use eksctl to associate an OIDC provider with your EKS cluster, for example: eksctl utils associate-iam-oidc-provider --cluster CLUSTER_NAME --approve Then follow the instructions here to add a trust policy to the IAM role which grants the necessary permissions for Terraform. Please note that if you have installed the controller following the README, then the namespace:serviceaccountname will be flux-system:tf-runner . You'll obtain a Role ARN to use in the next step. Finally, annotate the ServiceAccount for the tf-runner with the obtained Role ARN in your cluster: kubectl annotate -n flux-system serviceaccount tf-runner eks.amazonaws.com/role-arn = ROLE_ARN If deploying the tf-controller via Helm, this can be accomplished as follows: values : runner : serviceAccount : annotations : eks.amazonaws.com/role-arn : ROLE_ARN","title":"Use TF-controller with AWS EKS IRSA"},{"location":"use_tf_controller/with_Terraform_Enterprise/","text":"Use TF-controller with Terraform Enterprise Terraform Enterprise Integration Starting from v0.9.5, Weave TF-controller officially supports integration to Terraform Cloud (TFC) and Terraform Enterprise (TFE). Here are the steps to set up TF-controller for your TFE instance. Terraform Login First, you need to obtain an API token from your TFE. You can use terraform login command to do so. terraform login tfe.dev.example.com Then you can find your API token inside $HOME/.terraform.d/credentials.tfrc.json . Content of the file will look like this: { \"credentials\" : { \"tfe.dev.example.com\" : { \"token\" : \"mXXXXXXXXX.atlasv1.ixXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" } } } Prepare an TFRC file TF-controller accepts an TFRC file in the HCL format. So you have to prepare terraform.tfrc file using contents from above. credentials \"tfe.dev.example.com\" { token = \"mXXXXXXXXX.atlasv1.ixXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" } Create a Secret We will now create a Kubernetes Secret from your terraform.tfrc file, name it tfe-cli-config and put it inside the flux-system namespace. kubectl create secret generic \\ tfe-cli-config \\ --namespace = flux-system \\ --from-file = terraform.tfrc = ./terraform.tfrc Terraform Object In your Terraform object, you'll have to 1. disable the backend by setting spec.backendConfig.disable: true , and 2. point spec.cliConfigSecretRef: to the Secret created in the previous step, like this: --- apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : tfe-demo namespace : flux-system spec : approvePlan : auto interval : 2m path : ./terraform/tfe-demo backendConfig : disable : true cliConfigSecretRef : name : tfe-cli-config namespace : flux-system vars : - name : subject value : World sourceRef : kind : GitRepository name : flux-system namespace : flux-system writeOutputsToSecret : name : tfe-helloworld-output outputs : - greeting Terraform Module Don't forget that you need to tell your Terraform model to use your enterprise instance as well. Here's an example, terraform { required_version = \">= 1.1.0\" cloud { hostname = \"tfe.dev.example.com\" organization = \"weaveworks\" workspaces { name = \"dev\" } } } variable \"subject\" { type = string default = \"World\" description = \"Subject to hello\" } output \"greeting\" { value = \"Hello ${var.subject} from Terraform Enterprise\" } Terraform Cloud For connecting to Terraform Cloud, please replace your hostname to app.terraform.io .","title":"Use TF-controller with Terraform Enterprise"},{"location":"use_tf_controller/with_Terraform_Enterprise/#use-tf-controller-with-terraform-enterprise","text":"","title":"Use TF-controller with Terraform Enterprise"},{"location":"use_tf_controller/with_Terraform_Enterprise/#terraform-enterprise-integration","text":"Starting from v0.9.5, Weave TF-controller officially supports integration to Terraform Cloud (TFC) and Terraform Enterprise (TFE). Here are the steps to set up TF-controller for your TFE instance.","title":"Terraform Enterprise Integration"},{"location":"use_tf_controller/with_Terraform_Enterprise/#terraform-login","text":"First, you need to obtain an API token from your TFE. You can use terraform login command to do so. terraform login tfe.dev.example.com Then you can find your API token inside $HOME/.terraform.d/credentials.tfrc.json . Content of the file will look like this: { \"credentials\" : { \"tfe.dev.example.com\" : { \"token\" : \"mXXXXXXXXX.atlasv1.ixXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" } } }","title":"Terraform Login"},{"location":"use_tf_controller/with_Terraform_Enterprise/#prepare-an-tfrc-file","text":"TF-controller accepts an TFRC file in the HCL format. So you have to prepare terraform.tfrc file using contents from above. credentials \"tfe.dev.example.com\" { token = \"mXXXXXXXXX.atlasv1.ixXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" }","title":"Prepare an TFRC file"},{"location":"use_tf_controller/with_Terraform_Enterprise/#create-a-secret","text":"We will now create a Kubernetes Secret from your terraform.tfrc file, name it tfe-cli-config and put it inside the flux-system namespace. kubectl create secret generic \\ tfe-cli-config \\ --namespace = flux-system \\ --from-file = terraform.tfrc = ./terraform.tfrc","title":"Create a Secret"},{"location":"use_tf_controller/with_Terraform_Enterprise/#terraform-object","text":"In your Terraform object, you'll have to 1. disable the backend by setting spec.backendConfig.disable: true , and 2. point spec.cliConfigSecretRef: to the Secret created in the previous step, like this: --- apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : tfe-demo namespace : flux-system spec : approvePlan : auto interval : 2m path : ./terraform/tfe-demo backendConfig : disable : true cliConfigSecretRef : name : tfe-cli-config namespace : flux-system vars : - name : subject value : World sourceRef : kind : GitRepository name : flux-system namespace : flux-system writeOutputsToSecret : name : tfe-helloworld-output outputs : - greeting","title":"Terraform Object"},{"location":"use_tf_controller/with_Terraform_Enterprise/#terraform-module","text":"Don't forget that you need to tell your Terraform model to use your enterprise instance as well. Here's an example, terraform { required_version = \">= 1.1.0\" cloud { hostname = \"tfe.dev.example.com\" organization = \"weaveworks\" workspaces { name = \"dev\" } } } variable \"subject\" { type = string default = \"World\" description = \"Subject to hello\" } output \"greeting\" { value = \"Hello ${var.subject} from Terraform Enterprise\" }","title":"Terraform Module"},{"location":"use_tf_controller/with_Terraform_Enterprise/#terraform-cloud","text":"For connecting to Terraform Cloud, please replace your hostname to app.terraform.io .","title":"Terraform Cloud"},{"location":"use_tf_controller/with_a_custom_backend/","text":"Use TF-controller with a custom backend By default, tf-controller will use the Kubernetes backend to store the Terraform state file (tfstate) in cluster. The tfstate is stored in a secret named: tfstate-${workspace}-${secretSuffix} . The default suffix will be the name of the Terraform resource, however you may override this setting using .spec.backendConfig.secretSuffix . The default workspace name is \"default\", you can also override the workspace by setting .spec.workspace to another value. If you wish to use a custom backend, you can configure it by defining the .spec.backendConfig.customConfiguration with one of the backends such as GCS or S3 , for example: apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto backendConfig : customConfiguration : | backend \"s3\" { bucket = \"s3-terraform-state1\" key = \"dev/terraform.tfstate\" region = \"us-east-1\" endpoint = \"http://localhost:4566\" skip_credentials_validation = true skip_metadata_api_check = true force_path_style = true dynamodb_table = \"terraformlock\" dynamodb_endpoint = \"http://localhost:4566\" encrypt = true } interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system runnerPodTemplate : spec : image : registry.io/tf-runner:xyz","title":"Use TF-controller with a custom backend"},{"location":"use_tf_controller/with_a_custom_backend/#use-tf-controller-with-a-custom-backend","text":"By default, tf-controller will use the Kubernetes backend to store the Terraform state file (tfstate) in cluster. The tfstate is stored in a secret named: tfstate-${workspace}-${secretSuffix} . The default suffix will be the name of the Terraform resource, however you may override this setting using .spec.backendConfig.secretSuffix . The default workspace name is \"default\", you can also override the workspace by setting .spec.workspace to another value. If you wish to use a custom backend, you can configure it by defining the .spec.backendConfig.customConfiguration with one of the backends such as GCS or S3 , for example: apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto backendConfig : customConfiguration : | backend \"s3\" { bucket = \"s3-terraform-state1\" key = \"dev/terraform.tfstate\" region = \"us-east-1\" endpoint = \"http://localhost:4566\" skip_credentials_validation = true skip_metadata_api_check = true force_path_style = true dynamodb_table = \"terraformlock\" dynamodb_endpoint = \"http://localhost:4566\" encrypt = true } interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system runnerPodTemplate : spec : image : registry.io/tf-runner:xyz","title":"Use TF-controller with a custom backend"},{"location":"use_tf_controller/with_an_OCI_Artifact_as_Source/","text":"Use TF-controller with an OCI Artifact as Source To use OCI artifacts as the source of Terraform objects, you need Flux 2 version v0.32.0 or higher. Assuming that you have Terraform files (your root module may contain sub-modules) under ./modules, you can use Flux CLI to create an OCI artifact for your Terraform modules by running the following commands: flux push artifact oci://ghcr.io/tf-controller/helloworld: $( git rev-parse --short HEAD ) \\ --path = \"./modules\" \\ --source = \" $( git config --get remote.origin.url ) \" \\ --revision = \" $( git branch --show-current ) / $( git rev-parse HEAD ) \" flux tag artifact oci://ghcr.io/tf-controller/helloworld: $( git rev-parse --short HEAD ) \\ --tag main Then you define a source ( OCIRepository ), and use it as the sourceRef of your Terraform object. --- apiVersion : source.toolkit.fluxcd.io/v1beta2 kind : OCIRepository metadata : name : helloworld-oci spec : interval : 1m url : oci://ghcr.io/tf-controller/helloworld ref : tag : main --- apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld-tf-oci spec : path : ./ approvePlan : auto interval : 1m sourceRef : kind : OCIRepository name : helloworld-oci writeOutputsToSecret : name : helloworld-outputs","title":"Use TF-controller with an OCI Artifact as Source"},{"location":"use_tf_controller/with_an_OCI_Artifact_as_Source/#use-tf-controller-with-an-oci-artifact-as-source","text":"To use OCI artifacts as the source of Terraform objects, you need Flux 2 version v0.32.0 or higher. Assuming that you have Terraform files (your root module may contain sub-modules) under ./modules, you can use Flux CLI to create an OCI artifact for your Terraform modules by running the following commands: flux push artifact oci://ghcr.io/tf-controller/helloworld: $( git rev-parse --short HEAD ) \\ --path = \"./modules\" \\ --source = \" $( git config --get remote.origin.url ) \" \\ --revision = \" $( git branch --show-current ) / $( git rev-parse HEAD ) \" flux tag artifact oci://ghcr.io/tf-controller/helloworld: $( git rev-parse --short HEAD ) \\ --tag main Then you define a source ( OCIRepository ), and use it as the sourceRef of your Terraform object. --- apiVersion : source.toolkit.fluxcd.io/v1beta2 kind : OCIRepository metadata : name : helloworld-oci spec : interval : 1m url : oci://ghcr.io/tf-controller/helloworld ref : tag : main --- apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld-tf-oci spec : path : ./ approvePlan : auto interval : 1m sourceRef : kind : OCIRepository name : helloworld-oci writeOutputsToSecret : name : helloworld-outputs","title":"Use TF-controller with an OCI Artifact as Source"},{"location":"use_tf_controller/with_drift_detection_disabled/","text":"Use TF-controller with drift detection disabled Drift detection is enabled by default. You can set .spec.disableDriftDetection: true to disable it. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto disableDriftDetection : true interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system","title":"Use TF-controller with drift detection disabled"},{"location":"use_tf_controller/with_drift_detection_disabled/#use-tf-controller-with-drift-detection-disabled","text":"Drift detection is enabled by default. You can set .spec.disableDriftDetection: true to disable it. apiVersion : infra.contrib.fluxcd.io/v1alpha1 kind : Terraform metadata : name : helloworld namespace : flux-system spec : approvePlan : auto disableDriftDetection : true interval : 1m path : ./ sourceRef : kind : GitRepository name : helloworld namespace : flux-system","title":"Use TF-controller with drift detection disabled"}]}